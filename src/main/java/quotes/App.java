/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import netscape.javascript.JSObject;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

public class App {
    public static int lastQuote;
    public static int randomIndex;

    public static String getRandomQuote() throws FileNotFoundException {
        Gson gson = new Gson();
        Quote[] allQuotes = gson.fromJson(new FileReader("src/main/resources/recentquotes.json"), Quote[].class);

        //avoid using the same quote twice in a row
        while (randomIndex == lastQuote) {
            randomIndex = (int) Math.ceil(Math.random() * allQuotes.length);
        }
        lastQuote = randomIndex;

        return allQuotes[randomIndex].text + "\n-" + allQuotes[randomIndex].author;
    }

    public static String getQuoteFromAuthor(String author) throws FileNotFoundException {
        Gson gson = new Gson();
        Quote[] allQuotes = gson.fromJson(new FileReader("src/main/resources/recentquotes.json"), Quote[].class);

        int quoteCount = 0;
        Quote[] quotesFromThatAuthor = new Quote[quoteCount];
        Quote[] oldQuotes;
        for (Quote quote : allQuotes) {
            if (quote.author.contains(author)) {
                quoteCount++;
                oldQuotes = quotesFromThatAuthor;
                quotesFromThatAuthor = new Quote[quoteCount];
                for (int i = 0; i < oldQuotes.length; i++) {
                    quotesFromThatAuthor[i] = oldQuotes[i];
                }
                quotesFromThatAuthor[quoteCount - 1] = quote;
            }
        }
        randomIndex = (int) (Math.random() * quotesFromThatAuthor.length);
        return quotesFromThatAuthor[randomIndex].text + "\n-" + quotesFromThatAuthor[randomIndex].author;
    }

    public static String getQuoteThatContains(String phrase) throws FileNotFoundException {
        Gson gson = new Gson();
        Quote[] allQuotes = gson.fromJson(new FileReader("src/main/resources/recentquotes.json"), Quote[].class);

        int quoteCount = 0;
        Quote[] quotesWithThatPhrase = new Quote[quoteCount];
        Quote[] oldQuotes;
        for (Quote quote : allQuotes) {
            if (quote.text.contains(phrase)) {
                quoteCount++;
                oldQuotes = quotesWithThatPhrase;
                quotesWithThatPhrase = new Quote[quoteCount];
                for (int i = 0; i < oldQuotes.length; i++) {
                    quotesWithThatPhrase[i] = oldQuotes[i];
                }
                quotesWithThatPhrase[quoteCount - 1] = quote;
            }
        }
        randomIndex = (int) (Math.random() * quotesWithThatPhrase.length);
        return quotesWithThatPhrase[randomIndex].text + "\n-" + quotesWithThatPhrase[randomIndex].author;
    }

    public static String getRandomQuoteFromForismatic() throws FileNotFoundException {
        try {
            URL url = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");

            try {
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                //1 second timeout for testing
                connection.setConnectTimeout(1000);

                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));

                String line = reader.readLine();
                Gson gson = new Gson();

                //cache quote
                updateSavedQuotes(line);

                Quote quote = gson.fromJson(line, Quote.class);
                return quote.quoteText + "\n" + quote.quoteAuthor;

            } catch (IOException e) {
//                e.printStackTrace();
                System.out.println("Couldn't connect to Formismatic, here's a saved quote:");
                return getRandomQuote();
            }
        } catch (MalformedURLException | FileNotFoundException e) {
            e.printStackTrace();
            System.out.println("Couldn't find saved quotes.");
            return getRandomQuote();
        }
    }

    public static String formatQuote(String quote) {
        StringBuilder newQuote = new StringBuilder();
        newQuote.append("[");
        //replace "quoteAuthor" and "quoteText" with "author" and "text" for compatibility with the other methods
        quote = quote.replace("quoteAuthor", "author");
        quote = quote.replace("quoteText", "text");
        newQuote.append(quote);
        newQuote.append(",");
        return newQuote.toString();
    }

    public static void updateSavedQuotes(String quote) throws IOException {
        String newQuote = formatQuote(quote);

        Path path = Paths.get("src/main/resources/recentquotes.json");
        Scanner scanner = new Scanner(path);
        StringBuilder oldQuotes = new StringBuilder();

        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            oldQuotes.append(line);
        }
        //remove the first "["
        oldQuotes.deleteCharAt(0);
        oldQuotes.insert(0, newQuote);

        //save file
        //with help from https://crunchify.com/how-to-write-json-object-to-file-in-java/
        try (FileWriter file = new FileWriter("src/main/resources/recentquotes.json")) {
            file.write(oldQuotes.toString());
            System.out.println("Successfully updated recentquotes.json\n\n");
        }
    }



    public static void main(String[] args) throws IOException {
        if (args.length == 0) {
            System.out.println(getRandomQuoteFromForismatic());
        } else if (args[0].equals("author")) {
            System.out.println(getQuoteFromAuthor(args[1]));
        } else if (args[0].equals("contains")) {
            System.out.println(getQuoteThatContains(args[1]));
        }
    }
}
