/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import netscape.javascript.JSObject;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class App {
    public static int lastQuote;
    public static int randomIndex;

    public static String getRandomQuote() throws FileNotFoundException {
        Gson gson = new Gson();
        Quote[] allQuotes = gson.fromJson(new FileReader("src/main/resources/recentquotes.json"), Quote[].class);

        //avoid using the same quote twice in a row
        while (randomIndex == lastQuote) {
            randomIndex = (int) Math.ceil(Math.random() * allQuotes.length);
        }
        lastQuote = randomIndex;

        return allQuotes[randomIndex].text + "\n-" + allQuotes[randomIndex].author;
    }

    public static String getQuoteFromAuthor(String author) throws FileNotFoundException {
        Gson gson = new Gson();
        Quote[] allQuotes = gson.fromJson(new FileReader("src/main/resources/recentquotes.json"), Quote[].class);

        int quoteCount = 0;
        Quote[] quotesFromThatAuthor = new Quote[quoteCount];
        Quote[] oldQuotes;
        for (Quote quote : allQuotes) {
            if (quote.author.contains(author)) {
                quoteCount++;
                oldQuotes = quotesFromThatAuthor;
                quotesFromThatAuthor = new Quote[quoteCount];
                for (int i = 0; i < oldQuotes.length; i++) {
                    quotesFromThatAuthor[i] = oldQuotes[i];
                }
                quotesFromThatAuthor[quoteCount - 1] = quote;
            }
        }
        randomIndex = (int) (Math.random() * quotesFromThatAuthor.length);
        return quotesFromThatAuthor[randomIndex].text + "\n-" + quotesFromThatAuthor[randomIndex].author;
    }

    public static String getQuoteThatContains(String phrase) throws FileNotFoundException {
        Gson gson = new Gson();
        Quote[] allQuotes = gson.fromJson(new FileReader("src/main/resources/recentquotes.json"), Quote[].class);

        int quoteCount = 0;
        Quote[] quotesWithThatPhrase = new Quote[quoteCount];
        Quote[] oldQuotes;
        for (Quote quote : allQuotes) {
            if (quote.text.contains(phrase)) {
                quoteCount++;
                oldQuotes = quotesWithThatPhrase;
                quotesWithThatPhrase = new Quote[quoteCount];
                for (int i = 0; i < oldQuotes.length; i++) {
                    quotesWithThatPhrase[i] = oldQuotes[i];
                }
                quotesWithThatPhrase[quoteCount - 1] = quote;
            }
        }
        randomIndex = (int) (Math.random() * quotesWithThatPhrase.length);
        return quotesWithThatPhrase[randomIndex].text + "\n-" + quotesWithThatPhrase[randomIndex].author;
    }

    public static String getRandomQuoteFromForismatic() {
        try {
            URL url = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");

            try {
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));

                String line = reader.readLine();
                Gson gson = new Gson();
                Quote quote = gson.fromJson(line, Quote.class);
                return quote.quoteText + "\n" + quote.quoteAuthor;

            } catch (IOException e) {
                System.out.println("error");
                e.printStackTrace();
            }
        } catch (
        MalformedURLException e) {
            System.out.println("url is malformed");
            e.printStackTrace();
        }
        return "error connecting to forismatic";
    }


    public static void main(String[] args) throws FileNotFoundException {
//        if (args.length == 0) {
//            System.out.println(getRandomQuote());
//        } else if (args[0].equals("author")) {
//            System.out.println(getQuoteFromAuthor(args[1]));
//        } else if (args[0].equals("contains")) {
//            System.out.println(getQuoteThatContains(args[1]));
//        }
        System.out.println(getRandomQuoteFromForismatic());
    }
}
